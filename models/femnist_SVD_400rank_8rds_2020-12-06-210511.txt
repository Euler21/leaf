############################## femnist.cnn ##############################
[2m[36m(pid=3839)[0m 
[2m[36m(pid=3839)[0m =========================Options=============================
[2m[36m(pid=3839)[0m -max_depth                  10000
[2m[36m(pid=3839)[0m -min_bytes                  0
[2m[36m(pid=3839)[0m -min_peak_bytes             0
[2m[36m(pid=3839)[0m -min_residual_bytes         0
[2m[36m(pid=3839)[0m -min_output_bytes           0
[2m[36m(pid=3839)[0m -min_micros                 0
[2m[36m(pid=3839)[0m -min_accelerator_micros     0
[2m[36m(pid=3839)[0m -min_cpu_micros             0
[2m[36m(pid=3839)[0m -min_params                 0
[2m[36m(pid=3839)[0m -min_float_ops              1
[2m[36m(pid=3839)[0m -min_occurrence             0
[2m[36m(pid=3839)[0m -step                       -1
[2m[36m(pid=3839)[0m -order_by                   float_ops
[2m[36m(pid=3839)[0m -account_type_regexes       .*
[2m[36m(pid=3839)[0m -start_name_regexes         .*
[2m[36m(pid=3839)[0m -trim_name_regexes          
[2m[36m(pid=3839)[0m -show_name_regexes          .*
[2m[36m(pid=3839)[0m -hide_name_regexes          
[2m[36m(pid=3839)[0m -account_displayed_op_only  true
[2m[36m(pid=3839)[0m -select                     float_ops
[2m[36m(pid=3839)[0m -output                     stdout:
[2m[36m(pid=3839)[0m 
[2m[36m(pid=3839)[0m ==================Model Analysis Report======================
[2m[36m(pid=3839)[0m 
[2m[36m(pid=3839)[0m Doc:
[2m[36m(pid=3839)[0m scope: The nodes in the model graph are organized by their names, which is hierarchical like filesystem.
[2m[36m(pid=3839)[0m flops: Number of float operations. Note: Please read the implementation for the math behind it.
[2m[36m(pid=3839)[0m 
[2m[36m(pid=3839)[0m Profile:
[2m[36m(pid=3839)[0m node name | # float_ops
[2m[36m(pid=3839)[0m _TFProfRoot (--/13.20m flops)
[2m[36m(pid=3839)[0m   dense/kernel/Initializer/random_uniform (6.42m/12.85m flops)
[2m[36m(pid=3839)[0m     dense/kernel/Initializer/random_uniform/mul (6.42m/6.42m flops)
[2m[36m(pid=3839)[0m     dense/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3839)[0m   dense_1/kernel/Initializer/random_uniform (126.98k/253.95k flops)
[2m[36m(pid=3839)[0m     dense_1/kernel/Initializer/random_uniform/mul (126.98k/126.98k flops)
[2m[36m(pid=3839)[0m     dense_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3839)[0m   conv2d_1/kernel/Initializer/random_uniform (51.20k/102.40k flops)
[2m[36m(pid=3839)[0m     conv2d_1/kernel/Initializer/random_uniform/mul (51.20k/51.20k flops)
[2m[36m(pid=3839)[0m     conv2d_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3839)[0m   conv2d/kernel/Initializer/random_uniform (800/1.60k flops)
[2m[36m(pid=3839)[0m     conv2d/kernel/Initializer/random_uniform/mul (800/800 flops)
[2m[36m(pid=3839)[0m     conv2d/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3839)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/Neg (1/1 flops)
[2m[36m(pid=3839)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/mul (1/1 flops)
[2m[36m(pid=3839)[0m   sparse_softmax_cross_entropy_loss/num_present/Equal (1/1 flops)
[2m[36m(pid=3839)[0m 
[2m[36m(pid=3839)[0m ======================End of Report==========================
[2m[36m(pid=3833)[0m 
[2m[36m(pid=3833)[0m =========================Options=============================
[2m[36m(pid=3833)[0m -max_depth                  10000
[2m[36m(pid=3833)[0m -min_bytes                  0
[2m[36m(pid=3833)[0m -min_peak_bytes             0
[2m[36m(pid=3833)[0m -min_residual_bytes         0
[2m[36m(pid=3833)[0m -min_output_bytes           0
[2m[36m(pid=3833)[0m -min_micros                 0
[2m[36m(pid=3833)[0m -min_accelerator_micros     0
[2m[36m(pid=3833)[0m -min_cpu_micros             0
[2m[36m(pid=3833)[0m -min_params                 0
[2m[36m(pid=3833)[0m -min_float_ops              1
[2m[36m(pid=3833)[0m -min_occurrence             0
[2m[36m(pid=3833)[0m -step                       -1
[2m[36m(pid=3833)[0m -order_by                   float_ops
[2m[36m(pid=3833)[0m -account_type_regexes       .*
[2m[36m(pid=3833)[0m -start_name_regexes         .*
[2m[36m(pid=3833)[0m -trim_name_regexes          
[2m[36m(pid=3833)[0m -show_name_regexes          .*
[2m[36m(pid=3833)[0m -hide_name_regexes          
[2m[36m(pid=3833)[0m -account_displayed_op_only  true
[2m[36m(pid=3833)[0m -select                     float_ops
[2m[36m(pid=3833)[0m -output                     stdout:
[2m[36m(pid=3833)[0m 
[2m[36m(pid=3833)[0m ==================Model Analysis Report======================
[2m[36m(pid=3833)[0m 
[2m[36m(pid=3833)[0m Doc:
[2m[36m(pid=3833)[0m scope: The nodes in the model graph are organized by their names, which is hierarchical like filesystem.
[2m[36m(pid=3833)[0m flops: Number of float operations. Note: Please read the implementation for the math behind it.
[2m[36m(pid=3833)[0m 
[2m[36m(pid=3833)[0m Profile:
[2m[36m(pid=3833)[0m node name | # float_ops
[2m[36m(pid=3833)[0m _TFProfRoot (--/13.20m flops)
[2m[36m(pid=3833)[0m   dense/kernel/Initializer/random_uniform (6.42m/12.85m flops)
[2m[36m(pid=3833)[0m     dense/kernel/Initializer/random_uniform/mul (6.42m/6.42m flops)
[2m[36m(pid=3833)[0m     dense/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3833)[0m   dense_1/kernel/Initializer/random_uniform (126.98k/253.95k flops)
[2m[36m(pid=3833)[0m     dense_1/kernel/Initializer/random_uniform/mul (126.98k/126.98k flops)
[2m[36m(pid=3833)[0m     dense_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3833)[0m   conv2d_1/kernel/Initializer/random_uniform (51.20k/102.40k flops)
[2m[36m(pid=3833)[0m     conv2d_1/kernel/Initializer/random_uniform/mul (51.20k/51.20k flops)
[2m[36m(pid=3833)[0m     conv2d_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3833)[0m   conv2d/kernel/Initializer/random_uniform (800/1.60k flops)
[2m[36m(pid=3833)[0m     conv2d/kernel/Initializer/random_uniform/mul (800/800 flops)
[2m[36m(pid=3833)[0m     conv2d/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3833)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/Neg (1/1 flops)
[2m[36m(pid=3833)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/mul (1/1 flops)
[2m[36m(pid=3833)[0m   sparse_softmax_cross_entropy_loss/num_present/Equal (1/1 flops)
[2m[36m(pid=3833)[0m 
[2m[36m(pid=3833)[0m ======================End of Report==========================
[2m[36m(pid=3817)[0m 
[2m[36m(pid=3817)[0m =========================Options=============================
[2m[36m(pid=3817)[0m -max_depth                  10000
[2m[36m(pid=3817)[0m -min_bytes                  0
[2m[36m(pid=3817)[0m -min_peak_bytes             0
[2m[36m(pid=3817)[0m -min_residual_bytes         0
[2m[36m(pid=3817)[0m -min_output_bytes           0
[2m[36m(pid=3817)[0m -min_micros                 0
[2m[36m(pid=3817)[0m -min_accelerator_micros     0
[2m[36m(pid=3817)[0m -min_cpu_micros             0
[2m[36m(pid=3817)[0m -min_params                 0
[2m[36m(pid=3817)[0m -min_float_ops              1
[2m[36m(pid=3817)[0m -min_occurrence             0
[2m[36m(pid=3817)[0m -step                       -1
[2m[36m(pid=3817)[0m -order_by                   float_ops
[2m[36m(pid=3817)[0m -account_type_regexes       .*
[2m[36m(pid=3817)[0m -start_name_regexes         .*
[2m[36m(pid=3817)[0m -trim_name_regexes          
[2m[36m(pid=3817)[0m -show_name_regexes          .*
[2m[36m(pid=3817)[0m -hide_name_regexes          
[2m[36m(pid=3817)[0m -account_displayed_op_only  true
[2m[36m(pid=3817)[0m -select                     float_ops
[2m[36m(pid=3817)[0m -output                     stdout:
[2m[36m(pid=3817)[0m 
[2m[36m(pid=3817)[0m ==================Model Analysis Report======================
[2m[36m(pid=3817)[0m 
[2m[36m(pid=3817)[0m Doc:
[2m[36m(pid=3817)[0m scope: The nodes in the model graph are organized by their names, which is hierarchical like filesystem.
[2m[36m(pid=3817)[0m flops: Number of float operations. Note: Please read the implementation for the math behind it.
[2m[36m(pid=3817)[0m 
[2m[36m(pid=3817)[0m Profile:
[2m[36m(pid=3817)[0m node name | # float_ops
[2m[36m(pid=3817)[0m _TFProfRoot (--/13.20m flops)
[2m[36m(pid=3817)[0m   dense/kernel/Initializer/random_uniform (6.42m/12.85m flops)
[2m[36m(pid=3817)[0m     dense/kernel/Initializer/random_uniform/mul (6.42m/6.42m flops)
[2m[36m(pid=3817)[0m     dense/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3817)[0m   dense_1/kernel/Initializer/random_uniform (126.98k/253.95k flops)
[2m[36m(pid=3817)[0m     dense_1/kernel/Initializer/random_uniform/mul (126.98k/126.98k flops)
[2m[36m(pid=3817)[0m     dense_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3817)[0m   conv2d_1/kernel/Initializer/random_uniform (51.20k/102.40k flops)
[2m[36m(pid=3817)[0m     conv2d_1/kernel/Initializer/random_uniform/mul (51.20k/51.20k flops)
[2m[36m(pid=3817)[0m     conv2d_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3817)[0m   conv2d/kernel/Initializer/random_uniform (800/1.60k flops)
[2m[36m(pid=3817)[0m     conv2d/kernel/Initializer/random_uniform/mul (800/800 flops)
[2m[36m(pid=3817)[0m     conv2d/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3817)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/Neg (1/1 flops)
[2m[36m(pid=3817)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/mul (1/1 flops)
[2m[36m(pid=3817)[0m   sparse_softmax_cross_entropy_loss/num_present/Equal (1/1 flops)
[2m[36m(pid=3817)[0m 
[2m[36m(pid=3817)[0m ======================End of Report==========================
[2m[36m(pid=3803)[0m 
[2m[36m(pid=3803)[0m =========================Options=============================
[2m[36m(pid=3803)[0m -max_depth                  10000
[2m[36m(pid=3803)[0m -min_bytes                  0
[2m[36m(pid=3803)[0m -min_peak_bytes             0
[2m[36m(pid=3803)[0m -min_residual_bytes         0
[2m[36m(pid=3803)[0m -min_output_bytes           0
[2m[36m(pid=3803)[0m -min_micros                 0
[2m[36m(pid=3803)[0m -min_accelerator_micros     0
[2m[36m(pid=3803)[0m -min_cpu_micros             0
[2m[36m(pid=3803)[0m -min_params                 0
[2m[36m(pid=3803)[0m -min_float_ops              1
[2m[36m(pid=3803)[0m -min_occurrence             0
[2m[36m(pid=3803)[0m -step                       -1
[2m[36m(pid=3803)[0m -order_by                   float_ops
[2m[36m(pid=3803)[0m -account_type_regexes       .*
[2m[36m(pid=3803)[0m -start_name_regexes         .*
[2m[36m(pid=3803)[0m -trim_name_regexes          
[2m[36m(pid=3803)[0m -show_name_regexes          .*
[2m[36m(pid=3803)[0m -hide_name_regexes          
[2m[36m(pid=3803)[0m -account_displayed_op_only  true
[2m[36m(pid=3803)[0m -select                     float_ops
[2m[36m(pid=3803)[0m -output                     stdout:
[2m[36m(pid=3803)[0m 
[2m[36m(pid=3803)[0m ==================Model Analysis Report======================
[2m[36m(pid=3803)[0m 
[2m[36m(pid=3803)[0m Doc:
[2m[36m(pid=3803)[0m scope: The nodes in the model graph are organized by their names, which is hierarchical like filesystem.
[2m[36m(pid=3803)[0m flops: Number of float operations. Note: Please read the implementation for the math behind it.
[2m[36m(pid=3803)[0m 
[2m[36m(pid=3803)[0m Profile:
[2m[36m(pid=3803)[0m node name | # float_ops
[2m[36m(pid=3803)[0m _TFProfRoot (--/13.20m flops)
[2m[36m(pid=3803)[0m   dense/kernel/Initializer/random_uniform (6.42m/12.85m flops)
[2m[36m(pid=3803)[0m     dense/kernel/Initializer/random_uniform/mul (6.42m/6.42m flops)
[2m[36m(pid=3803)[0m     dense/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3803)[0m   dense_1/kernel/Initializer/random_uniform (126.98k/253.95k flops)
[2m[36m(pid=3803)[0m     dense_1/kernel/Initializer/random_uniform/mul (126.98k/126.98k flops)
[2m[36m(pid=3803)[0m     dense_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3803)[0m   conv2d_1/kernel/Initializer/random_uniform (51.20k/102.40k flops)
[2m[36m(pid=3803)[0m     conv2d_1/kernel/Initializer/random_uniform/mul (51.20k/51.20k flops)
[2m[36m(pid=3803)[0m     conv2d_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3803)[0m   conv2d/kernel/Initializer/random_uniform (800/1.60k flops)
[2m[36m(pid=3803)[0m     conv2d/kernel/Initializer/random_uniform/mul (800/800 flops)
[2m[36m(pid=3803)[0m     conv2d/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3803)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/Neg (1/1 flops)
[2m[36m(pid=3803)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/mul (1/1 flops)
[2m[36m(pid=3803)[0m   sparse_softmax_cross_entropy_loss/num_present/Equal (1/1 flops)
[2m[36m(pid=3803)[0m 
[2m[36m(pid=3803)[0m ======================End of Report==========================
[2m[36m(pid=3831)[0m 
[2m[36m(pid=3831)[0m =========================Options=============================
[2m[36m(pid=3831)[0m -max_depth                  10000
[2m[36m(pid=3831)[0m -min_bytes                  0
[2m[36m(pid=3831)[0m -min_peak_bytes             0
[2m[36m(pid=3831)[0m -min_residual_bytes         0
[2m[36m(pid=3831)[0m -min_output_bytes           0
[2m[36m(pid=3831)[0m -min_micros                 0
[2m[36m(pid=3831)[0m -min_accelerator_micros     0
[2m[36m(pid=3831)[0m -min_cpu_micros             0
[2m[36m(pid=3831)[0m -min_params                 0
[2m[36m(pid=3831)[0m -min_float_ops              1
[2m[36m(pid=3831)[0m -min_occurrence             0
[2m[36m(pid=3831)[0m -step                       -1
[2m[36m(pid=3831)[0m -order_by                   float_ops
[2m[36m(pid=3831)[0m -account_type_regexes       .*
[2m[36m(pid=3831)[0m -start_name_regexes         .*
[2m[36m(pid=3831)[0m -trim_name_regexes          
[2m[36m(pid=3831)[0m -show_name_regexes          .*
[2m[36m(pid=3831)[0m -hide_name_regexes          
[2m[36m(pid=3831)[0m -account_displayed_op_only  true
[2m[36m(pid=3831)[0m -select                     float_ops
[2m[36m(pid=3831)[0m -output                     stdout:
[2m[36m(pid=3831)[0m 
[2m[36m(pid=3831)[0m ==================Model Analysis Report======================
[2m[36m(pid=3831)[0m 
[2m[36m(pid=3831)[0m Doc:
[2m[36m(pid=3831)[0m scope: The nodes in the model graph are organized by their names, which is hierarchical like filesystem.
[2m[36m(pid=3831)[0m flops: Number of float operations. Note: Please read the implementation for the math behind it.
[2m[36m(pid=3831)[0m 
[2m[36m(pid=3831)[0m Profile:
[2m[36m(pid=3831)[0m node name | # float_ops
[2m[36m(pid=3831)[0m _TFProfRoot (--/13.20m flops)
[2m[36m(pid=3831)[0m   dense/kernel/Initializer/random_uniform (6.42m/12.85m flops)
[2m[36m(pid=3831)[0m     dense/kernel/Initializer/random_uniform/mul (6.42m/6.42m flops)
[2m[36m(pid=3831)[0m     dense/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3831)[0m   dense_1/kernel/Initializer/random_uniform (126.98k/253.95k flops)
[2m[36m(pid=3831)[0m     dense_1/kernel/Initializer/random_uniform/mul (126.98k/126.98k flops)
[2m[36m(pid=3831)[0m     dense_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3831)[0m   conv2d_1/kernel/Initializer/random_uniform (51.20k/102.40k flops)
[2m[36m(pid=3831)[0m     conv2d_1/kernel/Initializer/random_uniform/mul (51.20k/51.20k flops)
[2m[36m(pid=3831)[0m     conv2d_1/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3831)[0m   conv2d/kernel/Initializer/random_uniform (800/1.60k flops)
[2m[36m(pid=3831)[0m     conv2d/kernel/Initializer/random_uniform/mul (800/800 flops)
[2m[36m(pid=3831)[0m     conv2d/kernel/Initializer/random_uniform/sub (1/1 flops)
[2m[36m(pid=3831)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/Neg (1/1 flops)
[2m[36m(pid=3831)[0m   gradients/sparse_softmax_cross_entropy_loss/value_grad/mul (1/1 flops)
[2m[36m(pid=3831)[0m   sparse_softmax_cross_entropy_loss/num_present/Equal (1/1 flops)
[2m[36m(pid=3831)[0m 
[2m[36m(pid=3831)[0m ======================End of Report==========================
Clients in Total: 194
--- Random Initialization ---
train_accuracy: 0.00363116, 10th percentile: 0, 50th percentile: 0.00352117, 90th percentile 0.00712766
train_loss: 4.12044, 10th percentile: 4.11509, 50th percentile: 4.11973, 90th percentile 4.12671
test_accuracy: 0.00392145, 10th percentile: 0, 50th percentile: 0, 90th percentile 0
test_loss: 4.11996, 10th percentile: 4.09628, 50th percentile: 4.12079, 90th percentile 4.14429
--- Round 1 of 8: Training 2 Clients ---
train_accuracy: 0.0541996, 10th percentile: 0.0280311, 50th percentile: 0.0672109, 90th percentile 0.0903297
train_loss: 3.84061, 10th percentile: 3.74282, 50th percentile: 3.7984, 90th percentile 3.91425
test_accuracy: 0.0532278, 10th percentile: 0, 50th percentile: 0.0555556, 90th percentile 0.122794
test_loss: 3.84835, 10th percentile: 3.68865, 50th percentile: 3.8443, 90th percentile 3.97366
--- Round 2 of 8: Training 2 Clients ---
train_accuracy: 0.239755, 10th percentile: 0.109474, 50th percentile: 0.252821, 90th percentile 0.439351
train_loss: 3.47908, 10th percentile: 3.04407, 50th percentile: 3.26915, 90th percentile 3.81865
test_accuracy: 0.233835, 10th percentile: 0.0422857, 50th percentile: 0.222222, 90th percentile 0.5
test_loss: 3.50386, 10th percentile: 2.86725, 50th percentile: 3.44989, 90th percentile 4.03919
--- Round 3 of 8: Training 2 Clients ---
train_accuracy: 0.406412, 10th percentile: 0.242045, 50th percentile: 0.427728, 90th percentile 0.61199
train_loss: 2.37194, 10th percentile: 1.79522, 50th percentile: 2.34154, 90th percentile 2.87052
test_accuracy: 0.403674, 10th percentile: 0.180186, 50th percentile: 0.410428, 90th percentile 0.666667
test_loss: 2.41095, 10th percentile: 1.55422, 50th percentile: 2.41789, 90th percentile 3.05113
--- Round 4 of 8: Training 2 Clients ---
train_accuracy: 0.552079, 10th percentile: 0.344382, 50th percentile: 0.545875, 90th percentile 0.699816
train_loss: 1.73255, 10th percentile: 1.21988, 50th percentile: 1.68953, 90th percentile 2.59106
test_accuracy: 0.549921, 10th percentile: 0.294118, 50th percentile: 0.559028, 90th percentile 0.764706
test_loss: 1.77132, 10th percentile: 1.05362, 50th percentile: 1.72157, 90th percentile 2.73143
--- Round 5 of 8: Training 2 Clients ---
train_accuracy: 0.573744, 10th percentile: 0.401552, 50th percentile: 0.573366, 90th percentile 0.734876
train_loss: 1.61815, 10th percentile: 1.02736, 50th percentile: 1.57008, 90th percentile 2.47606
test_accuracy: 0.563482, 10th percentile: 0.333333, 50th percentile: 0.559028, 90th percentile 0.764706
test_loss: 1.66954, 10th percentile: 0.974047, 50th percentile: 1.62509, 90th percentile 2.6512
--- Round 6 of 8: Training 2 Clients ---
train_accuracy: 0.621084, 10th percentile: 0.46408, 50th percentile: 0.62016, 90th percentile 0.770276
train_loss: 1.40539, 10th percentile: 0.88368, 50th percentile: 1.34904, 90th percentile 2.12416
test_accuracy: 0.606142, 10th percentile: 0.379167, 50th percentile: 0.611111, 90th percentile 0.823529
test_loss: 1.46737, 10th percentile: 0.733926, 50th percentile: 1.41559, 90th percentile 2.30678
--- Round 7 of 8: Training 2 Clients ---
train_accuracy: 0.638313, 10th percentile: 0.472447, 50th percentile: 0.636891, 90th percentile 0.795548
train_loss: 1.34363, 10th percentile: 0.794433, 50th percentile: 1.32983, 90th percentile 2.09438
test_accuracy: 0.62477, 10th percentile: 0.403529, 50th percentile: 0.642857, 90th percentile 0.830833
test_loss: 1.39502, 10th percentile: 0.6147, 50th percentile: 1.29218, 90th percentile 2.22218
--- Round 8 of 8: Training 2 Clients ---
train_accuracy: 0.653391, 10th percentile: 0.467646, 50th percentile: 0.652747, 90th percentile 0.805352
train_loss: 1.3044, 10th percentile: 0.705156, 50th percentile: 1.23365, 90th percentile 2.18858
test_accuracy: 0.6368, 10th percentile: 0.411765, 50th percentile: 0.642581, 90th percentile 0.822899
test_loss: 1.36899, 10th percentile: 0.6056, 50th percentile: 1.29756, 90th percentile 2.37001
